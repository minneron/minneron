#+title: minneron
* narrative view (completed plans/notes, old versions, etc)          :nr:min:
:PROPERTIES:
:TS: <2013-01-12 07:58AM>
:ID: qxoi0cl0lzf0
:END:
** TODO [0/4] prerequisites
:PROPERTIES:
:TS: <2013-01-11 04:49AM>
:ID: 21j3a1b1jzf0
:END:
*** TODO SECT What you should already know.
:PROPERTIES:
:TS: <2013-01-11 04:53AM>
:ID: 0zjgg8b1jzf0
:END:
*** TODO link to introductory pascal
:PROPERTIES:
:TS: <2013-01-11 04:53AM>
:ID: u7x539b1jzf0
:END:
*** TODO show the cursor interface
:PROPERTIES:
:TS: <2013-01-11 04:49AM>
:ID: r0oel1b1jzf0
:END:
*** TODO ui.input interface
:PROPERTIES:
:TS: <2013-01-11 04:50AM>
:ID: olz7x3b1jzf0
:END:
** DONE [6/6] implementing basic editor                              :ed001:
:PROPERTIES:
:TS: <2013-01-11 12:09PM>
:ID: k3n7vug0kzf0
:END:
*** DONE [3/3] CARD get cedit.pas working again
:PROPERTIES:
:TS:       <2012-11-10 12:42PM>
:ID:       hcg7aat0axf0
:END:
**** DONE pntstuff.pas(66,15) Error: Wrong number of parameters specified for call to "killnode" :bug:
:PROPERTIES:
:TS:       <2012-11-10 12:54PM>
:ID:       st87v6w0axf0
:END:
This just needed an @ to prevent invocation.

**** DONE crtstuff.pas(1472,4) Fatal: Selected assembler reader not supported :bug:
:PROPERTIES:
:TS:       <2012-11-10 01:09PM>
:ID:       uq04zvw0axf0
:END:
***** NOTE basically, crtstuff doesn't compile.
:PROPERTIES:
:TS:       <2012-11-10 01:36PM>
:ID:       65f0e4y0axf0
:END:
***** NOTE workaround: use cw instead ( ?? )
:PROPERTIES:
:TS:       <2012-11-10 01:40PM>
:ID:       dlvgsay0axf0
:END:
***** NOTE . or: just describe the program from the top down
:PROPERTIES:
:TS:       <2012-11-10 01:51PM>
:ID:       qbkefty0axf0
:END:
Maybe rather than trying to compile it, with all those huge broken dependencies, I should just start at the begin section and try and clean it up.
***** NOTE . decided to do both.
:PROPERTIES:
:TS:       <2012-11-10 03:09PM>
:ID:       8k7jrf21axf0
:END:
I commented out most of cedit (anything that relied on my old code, especially). Now I'm going to step through and clean it up a little at a time, making sure it compiles.
***** NOTE . refactoring, test framework, etc
:PROPERTIES:
:TS:       <2012-11-12 01:32PM>
:ID:       ola4zkf0dxf0
:END:
Well, I got cedit to compile at some point in the past few days. I basically commented everything out that wasn't pure pascal, and then re-enabled one line at a time until it compiled. Along the way, I broke crtstuff down into smaller pieces.

Unfortunately, it still doesn't work, so last night I started making a test framework. Actually, I /tried/ to use dunit, but I couldn't get it to compile... And then I decided it was just way bigger and complicated than I really needed anyway. Yes, the gestalt problem again.

Anyway, I wrote my own little test system last night, so today I will track down the bugs in the linked list module by implementing some tests to specify how this thing is supposed to work.

**** DONE cedit shows no text, crashes on arrowdown                  :bug:
:PROPERTIES:
:TS:       <2012-11-12 01:48PM>
:ID:       98dh8bg0dxf0
:END:
***** NOTE repaired ll.append/insert logic, then moved from objects->classes
:PROPERTIES:
:TS:       <2012-11-13 03:25AM>
:ID:       pmcf1l30exf0
:END:
I think probably the code worked before, but I somehow broke things while trying to get it to compile at all. In any case, I now have a test framework cleared out a /bunch/ of duplicate logic from this thing.

Still have one bug, but it's in ~cw.pas~, not ~cedit~, so I'm going to mark this done! :)
*** DONE [0/0] create a simple line editor ( ui.zinput as reference? )
:PROPERTIES:
:TS:       <2012-11-10 02:37PM>
:ID:       fr78ey01axf0
:END:
*** DONE [2/2] build oberon-style "text" (ll of strings + markers)
:PROPERTIES:
:TS:       <2012-11-13 11:53AM>
:ID:       w4q793r0exf0
:END:
**** DONE [0/0] create a token type
:PROPERTIES:
:TS: <2013-01-01 10:45PM>
:ID: ez8ho0117zf0
:END:
[0104.2013 04:54AM] done in type token (really same as li.strtoken)

**** DONE [0/0] create linked list of tokens
:PROPERTIES:
:TS: <2013-01-01 10:47PM>
:ID: 06kgs4117zf0
:END:
[0104.2013 04:55AM] done in type tagtoken = li.objtoken

*** DONE [0/0] convert cedit to use the buffer type
:PROPERTIES:
:TS: <2013-01-04 04:56AM>
:ID: f7a9vtz0azf0
:END:

I suppose in this case, we want to use elements/blocks.

Looks like it's already using stringnodes, but that's pretty much the same as li.strnode, so i might as well use a list of li.nodes. But I'll go ahead and use the buffer type I created in mn.trail.

Another thing I did was make the editor class (previously =listeditor=) be a container for a buffer, rather than a subclass.

*** DONE [0/0] read lines of text as the initial chunks
:PROPERTIES:
:TS: <2013-01-01 10:46PM>
:ID: kozjs1117zf0
:END:

This was already done in cedit too. :)

*** DONE [0/0] show the line editor on the highlighted line
:PROPERTIES:
:TS: <2013-01-04 07:15AM>
:ID: th42v961azf0
:END:
** CARD working through wordwrap / tokenization                      :ed004:
:PROPERTIES:
:TS: <2013-01-11 03:17AM>
:ID: f0042s61jzf0
:END:
*** DEVLOG still stuck on wordwrap
:PROPERTIES:
:TS: <2013-01-11 02:15AM>
:ID: v6zgxw31jzf0
:END:
I'm still stuck. I know that word wrap is my next step, but I'm not sure what to do yet.
Does zinput need to change?

Suppose I leave zinput alone as a simple string editor, and I just use it to edit one token at a time. Every time I hit space or enter, I move the editor widget. This is nice, because it means I don't have to change zinput.

It does mean I need to break the file into tokens. Right now, I'm using pascal's standard =ReadLn= function, which simply reads characters until it encounters a platform-specific newline marker.
*** DEVLOG spans should not be the superclass for elements
:PROPERTIES:
:TS: <2013-01-12 02:49PM>
:ID: jd1crc41lzf0
:END:

For a while, I thought it made sense to have a strictly linear text buffer, where each block was marked by two separate anchors. The idea was that cursor movement would then always be either an array offset change, or it would be a pointer change.

I think this was simply me over-applying the jumptree metaphor and picturing a rim - a single, linear list of tokens.

But this data structure is un-necessary. Instead of two anchor nodes, I can just use a single element node.

*** DEVLOG word-wrap semi-working
:PROPERTIES:
:TS: <2013-01-13 06:24PM>
:ID: hk63ouf0nzf0
:END:
Lots of low-level fixes to stri.pas today... Org is kind of slowing me down, because now there's a disconnect between where I edit the code and what the line numbers say in the stack traces.

I'm stripping out whitespace at the moment, which isn't the right thing to do, unless I'm trying to make a web browser. But: it builds a list of lines and (sorta) word-wraps.

So: I need to restore whitespace (and also the last character of every line), and get the token editor / cursor stuff working again.


* TODO <cleanup> support view (meta / tool stuff)                    :su:min:
:PROPERTIES:
:TS: <2013-01-11 11:08AM>
:ID: okc3d1e0kzf0
:END:
** TODO behavior driven test harness
:PROPERTIES:
:TS: <2013-01-11 03:40AM>
:ID: ogu9pv71jzf0
:END:
#+begin_src pascal :tangle ".gen/test_edcmds.pas" :padline yes :noweb tangle
  program test_edcmds;
  uses min;
    var
      ch       : char;
      ed       : min.editor;
      expected : string;
      passed,
      failed   : cardinal;

    <<runln>>
    <<testln>>
    <<report>>
  begin
    ed.create;
    while not eof do
      case read( ch ) of
        '$' : readln( ed.value );
        '>' : runln;
        '!' : testln;
      end
    <<report>>
  end.
#+end_src
** TODO [0/0] implement org-babel-tangle
:PROPERTIES:
:TS:       <2012-11-13 11:06AM>
:ID:       ls96dwo0exf0
:END:
** TODO [1/2] get all my <old> pascal code into a database
:PROPERTIES:
:TS:       <2012-11-10 12:42PM>
:ID:       k1b2zlv0axf0
:END:
maybe use the code tools?
*** DONE convert old pascal source files to unicode
:PROPERTIES:
:TS:       <2012-11-10 02:21PM>
:ID:       gs594801axf0
:END:
*** TODO parse pascal/oberon/turbo                                 :parser:
:PROPERTIES:
:TS:       <2012-11-10 01:50PM>
:ID:       yv64pry0axf0
:END:
** TODO [0/0] cw.cwriteln's end of line handling breaks ( on linux, anyway ). :bug:
:PROPERTIES:
:TS:       <2012-11-13 03:29AM>
:ID:       mmherr30exf0
:END:
This could be compounded by the fact that I'm also trying to use kvm.
** TODO [0/0] [#A] parse org files - see file:~/r/@code/@py/o2x.py
:PROPERTIES:
:TS:       <2012-11-10 11:18AM>
:ID:       d0c5kpr0axf0
:END:
* TODO <cleanup> INBOX unfiled items - clarify!                          :xx:
:PROPERTIES:
:TS: <2013-01-11 11:48AM>
:ID: m4p4mvf0kzf0
:END:
** TODO console web browsers
:PROPERTIES:
:TS: <2013-01-11 11:48AM>
:ID: 91khtvf0kzf0
:END:
** TODO [0/0] get tmux to work sort of like autohotkey                :tmux:
:PROPERTIES:
:TS:       <2012-11-10 11:18AM>
:ID:       mpj2aqr0axf0
:END:
** TODO [0/1] database forms
:PROPERTIES:
:TS:       <2012-11-13 11:48AM>
:ID:       eso31uq0exf0
:END:
*** TODO [0/0] I think ymenu has a basic form. I could mix with html/django form model
:PROPERTIES:
:TS:       <2012-11-13 11:48AM>
:ID:       xov0muq0exf0
:END:
** TODO [0/2] harvest other editors ( once I have core editor working in pascal )
:PROPERTIES:
:TS:       <2012-11-13 11:42AM>
:ID:       kt1h6kq0exf0
:END:
*** TODO [0/0] harvest diakonos
:PROPERTIES:
:TS:       <2012-11-13 11:40AM>
:ID:       5g1jugq0exf0
:END:
*** TODO [0/0] harvest codemirror
:PROPERTIES:
:TS:       <2012-11-13 11:42AM>
:ID:       ccr0wkq0exf0
:END:
** WANT browser keybidings for scroll, etc                         :browser:
:PROPERTIES:
:TS:       <2012-11-10 11:20AM>
:ID:       kjx0ctr0axf0
:END:
i wish i could use my normal keybindings for paging, etc in the browser
*** TODO try conkeror
:PROPERTIES:
:TS:       <2012-11-10 11:21AM>
:ID:       4dmjvur0axf0
:END:
** TODO command reference                                              :cmd:
:PROPERTIES:
:TS: <2013-01-10 08:24AM>
:ID: rfxenx41izf0
:END:
*** cursor movement commands
:PROPERTIES:
:TS: <2013-01-10 08:24AM>
:ID: zm4gsw41izf0
:END:
*** tree movement commands
:PROPERTIES:
:TS: <2013-01-10 08:31AM>
:ID: 8ybhm851izf0
:END:
*** version control commands
:PROPERTIES:
:TS: <2013-01-10 08:32AM>
:ID: wekjl951izf0
:END:
**** undo/redo
:PROPERTIES:
:TS: <2013-01-10 08:32AM>
:ID: 7y602a51izf0
:END:

*** string manipulation commands
:PROPERTIES:
:TS: <2013-01-10 08:24AM>
:ID: 8p551x41izf0
:END:
**** TODO insert char
:PROPERTIES:
:TS: <2013-01-10 08:25AM>
:ID: xq7dbz41izf0
:END:
**** TODO delete char
:PROPERTIES:
:TS: <2013-01-10 08:26AM>
:ID: zctajz41izf0
:END:

*** compiler commands
:PROPERTIES:
:TS: <2013-01-10 08:25AM>
:ID: yb66dy41izf0
:END:

*** range/selection commands
:PROPERTIES:
:TS: <2013-01-10 08:29AM>
:ID: 0izal551izf0
:END:

*** token/highlight commands
:PROPERTIES:
:TS: <2013-01-10 08:29AM>
:ID: 9o44r451izf0
:END:
**** set style
:PROPERTIES:
:TS: <2013-01-10 08:29AM>
:ID: c83lc551izf0
:END:
**** break token (space bar)
:PROPERTIES:
:TS: <2013-01-10 08:52AM>
:ID: ps0ca761izf0
:END:

*** terminal commands
:PROPERTIES:
:TS: <2013-01-10 08:28AM>
:ID: jntap351izf0
:END:
**** cursor position
:PROPERTIES:
:TS: <2013-01-10 08:28AM>
:ID: x4h40451izf0
:END:
**** set color
:PROPERTIES:
:TS: <2013-01-10 08:28AM>
:ID: b0067451izf0
:END:
** TODO graphical tmux-like thing for windows ( but with browsers, etc ) :unclear:
:PROPERTIES:
:TS:       <2012-11-10 11:18AM>
:ID:       23q5upr0axf0
:END:
Could use windows API, or mozilla.
** i want to unify the emacs and tmux keybindngs                      :tmux:
:PROPERTIES:
:TS:       <2012-11-10 11:18AM>
:ID:       5yfj6qr0axf0
:END:
especially for switching / resizing windows
C-x | to do vertical split, maybe?
** TODO [0/0] load entire files directly into ram
:PROPERTIES:
:TS:       <2012-11-10 12:21PM>
:ID:       hpwbsmu0axf0
:END:
Rather than deal with the bytestream protocol, just load the files directly into ram, and deal with them there. This gives us random access, etc.
** IDEA li.node -> atom/cell
:PROPERTIES:
:TS: <2013-01-12 03:32PM>
:ID: s8i3gc61lzf0
:END:

First, li is the wrong name for the unit, because it's not actually an interpreter, just a hand-built scanner / parser.

Second, it kind of makes sense to use node for items in the document / tree / graph structure. An html tag is something like a nested record after all.

A better name for these things would be atom or cell, as in lisp.

** PLAN building primitive types up from registers
:PROPERTIES:
:TS: <2013-01-12 04:00PM>
:ID: 51dk9s61lzf0
:END:

1. cardinal -> computer cells as natural number
2. pointer  -> using cardinals to reference positions in ram
3. array    -> pointer + /relative/ pointer (length).
4. bitmap   -> so we can draw pixels to make our characters
5. char     -> so we can create a simple bitmap font

** PLAN an 8-bit character device
:PROPERTIES:
:TS: <2013-01-12 04:00PM>
:ID: 2455zm71lzf0
:END:
*** .
 A simple terminal program would probably fit in 256 bytes, so an 8-bit computer for a character generator isn't out of the question if we can store the character map in rom and refer to it with a single byte.

 The old text display at (* 80 25) is 2000 bytes, or 4000 if we add another byte for color. That wastes 96 bytes if video ram is 4k.

 Since 2000 or 4000 is more than a single register can handle at 8 bits, we have to use 2 of them to loop through video ram.

 This is actually a nice machine to use because with 8 bits, we only need an adder, and it'll just loop around after 256 instructions.

 What would be really cool is if we could introduce the instruction set along with this, and even show how we could build it out of circuits.

*** NOTE . uses for the 160 extendend characters (+ 128 32)
 :PROPERTIES:
 :TS: <2013-01-12 04:13PM>
 :ID: fi9g6981lzf0
 :END:

40 : shavian / quickscript
16 : hex numbers
16 : math: \ne \le \ge lam \pi \radic \sup2 in \not and or dot subset superset \div \times
12 : box drawing (4 corners, -, |, |- -|, +, T, upside down T)
 6 : chess pieces (1k 2q 3r 4b 5n 6p)
 4 : card suits (d c s h)
 4 : l,r,u,d arrows
 3 : walls ( 4/5 shade (same as 1/5), 3/5 shade, 2/5 shade )
 2 : chevrons
 2 : game: face, ghost
 2 : half blocks (vertical and horizontal)
 1 : type symbol \curren (currency)

(- 128 (+ 40 16 16 12 6 4 4 3 2 2 2 1 ))

20 left over for the user, but of course we will implement unicode later.

** PLAN building a type system for nodes (records/tuples/messages...)
:PROPERTIES:
:TS: <2013-01-12 04:54PM>
:ID: jqz9j5a1lzf0
:END:

*** STEP . array size as a type
:PROPERTIES:
:TS: <2013-01-12 04:58PM>
:ID: 5d2iqba1lzf0
:END:
Not in the old pascal sense, just "a thing that takes up x bytes."


*** STEP . create an array the size of RAM at address 0
:PROPERTIES:
:TS: <2013-01-12 05:17PM>
:ID: 8eqak7b1lzf0
:END:

*** STEP . pointer + size + array = string or dynamic array
:PROPERTIES:
:TS: <2013-01-12 05:06PM>
:ID: uw798qa1lzf0
:END:
pointer points to index 0. previous cell would hold the length.
*** STEP . tuple is a size-3 array of ( name, slotcount, array of coldefs )
:PROPERTIES:
:TS: <2013-01-12 04:56PM>
:ID: q6jik9a1lzf0
:END:
*** TODO STEP . coldef <already defined in file:minneron.vue>
:PROPERTIES:
:TS: <2013-01-12 05:13PM>
:ID: ahui21b1lzf0
:END:
*** STEP . define a procedure to allocate an amount of ram
:PROPERTIES:
:TS: <2013-01-12 05:18PM>
:ID: u5vc79b1lzf0
:END:



Here's an easy approach, assuming we can access individual bytes:

#+begin_src pascal
  function allocate( cells : cardinal ) : pointer;
  begin
    result := pointer( @ram + here );
    inc( vm.here, num_cells );
  end;
#+end_src

*** TODO decide between forth/pascal usages of '@'                  :wejal:
:PROPERTIES:
:TS: <2013-01-12 05:38PM>
:ID: ykygi7c1lzf0
:END:
pascal : address of.
forth  : dereference.

Pascal code really has no business using @.

** PLAN . build the code generator from the bottom up
:PROPERTIES:
:TS: <2013-01-12 05:56PM>
:ID: d7vcc1d1lzf0
:END:
*** TODO NOTE . implement addition from nand / not+and+xor
:PROPERTIES:
:TS: <2013-01-12 06:02PM>
:ID: kxoizad1lzf0
:END:

#+begin_src pascal

  carries := 0;
  repeat
    simple_add := a xor b;
    carries := a and b;
    carries := carries shl 1
  until carries = 0 or bits := 8;

#+end_src

**** DONE also figure out how to implement =shl= with those primitives
:PROPERTIES:
:TS: <2013-01-12 06:07PM>
:ID: 8nphxjd1lzf0
:END:

i can see how to do it with :
#+begin_src pascal
  { pascal has a 'shl' operator, but if it didn't,
    you could make it yourself from AND and OR }
  function shift_left_from_scratch( b : byte ) : byte;
    var s : byte;
  begin
    s := 0;
    if ( b and 128 ) <> 0 then s := s or 64;
    if ( b and  64 ) <> 0 then s := s or 32;
    if ( b and  32 ) <> 0 then s := s or 16;
    if ( b and  16 ) <> 0 then s := s or  8;
    if ( b and   8 ) <> 0 then s := s or  4;
    if ( b and   4 ) <> 0 then s := s or  2;
    if ( b and   2 ) <> 0 then s := s or  1;
    result := s
  end;
#+end_src


*** NOTE . branches ( forward jumps )
:PROPERTIES:
:TS: <2013-01-12 06:00PM>
:ID: uee4q7d1lzf0
:END:
Remember: do these first because we get loops for free from the overflow.

*** NOTE . loops ( backward jumps )
:PROPERTIES:
:TS: <2013-01-12 05:59PM>
:ID: x1k5l5d1lzf0
:END:

*** NOTE . invocation ( calling conventions )
:PROPERTIES:
:TS: <2013-01-12 06:00PM>
:ID: nu81r6d1lzf0
:END:

**** NOTE . procedure calls ( gosub )
:PROPERTIES:
:TS: <2013-01-12 05:59PM>
:ID: 1qb5r5d1lzf0
:END:

**** NOTE . procedure return
:PROPERTIES:
:TS: <2013-01-12 05:59PM>
:ID: x0mbv5d1lzf0
:END:

**** NOTE .
:PROPERTIES:
:TS: <2013-01-12 06:01PM>
:ID: zus599d1lzf0
:END:


** PLAN . code generator + parse engine + oberon grammar = bottom up compiler
:PROPERTIES:
:TS: <2013-01-12 06:28PM>
:ID: yqxheie1lzf0
:END:
*** NOTE . keep the grammar LL(1) at this point (so no backtracking)
:PROPERTIES:
:TS: <2013-01-12 06:34PM>
:ID: igmhx600mzf0
:END:
*** NOTE . push values to a stack as they're matched. gen code immediately.
:PROPERTIES:
:TS: <2013-01-12 06:33PM>
:ID: iw2hn600mzf0
:END:

** PLAN . emit code to allow /both/ static and dynamic type checking
:PROPERTIES:
:TS: <2013-01-12 05:46PM>
:ID: 34kahkc1lzf0
:END:

compiler's type system can be re-used in the vm.
the only difference is that the type checking code is inserted up front.

#+begin_src pascal
  procedure emit_procedure( p : proc_def );
  begin
    emit_dynamic_checks;
    p.static_start := here;
    emit_local_inits( p.local_defs );
    emit_proc_body( p.body );
    emit_return( p.has_result );
  end;
#+end_src

** PLAN building more scalar types
:PROPERTIES:
:TS: <2013-01-12 04:56PM>
:ID: wtkfp8a1lzf0
:END:
*** NOTE . introduce big integers
:PROPERTIES:
:TS: <2013-01-12 04:55PM>
:ID: z1o6j7a1lzf0
:END:
*** NOTE . introduce sets
:PROPERTIES:
:TS: <2013-01-12 04:55PM>
:ID: xtha87a1lzf0
:END:







* DRAFT . record type descriptor
:PROPERTIES:
:TS: <2013-01-13 08:08AM>
:ID: ale3uv11mzf0
:END:
#+begin_src pascal
  type
    kind     = object { haskell gadt / pascal variant record }
      kind_id      : primary;
      num_variants : cardinal;
      variants     : pointer;
      num_classes  : cardinal;
      classes      : pointer;
      num_coldefs  : cardinal; { fields common to all variants }
      coldefs      : pointer;
    end;

    variant  = object
      variant_id  : primary;
      kind_id     : foreign;
      order       : cardinal;
      num_coldefs : cardinal;
      fields      : pointer;
    end;

    classdef = object
      symbol : string;
    end;

    coldef   = object
    end;

#+end_src
** NOTE . explanation
:PROPERTIES:
:TS: <2013-01-13 09:02AM>
:ID: m0ocpd41mzf0
:END:
This is a start on model of a type system for the database / language.

Remember, the idea is that algebraic data types ( variant records ) are used everywhere in the system, for message passing ( events / inputs ), display output
(want to draw a circle? output a circle record!) abstract syntax trees / documents, and (of course) actual database records.

The same type descriptors should /also/ be reused in procedure signatures, and even the implicit types created by the variable and argument declarations in a (possibly nested) procedure definition.

Above, I was trying to figure out how to model these things using the relational model. The =pointer= type really needs to be something else. Probably something more like a =reference= type, that can be either a pointer or a foreign key, depending on whether the record has been loaded into working ram or not.

* end.
