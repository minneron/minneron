#+title: procedural view (current procedure/method definitions)
#+tags: pr min
#+date: <2013-01-11 11:07AM>

* CLASS =TBuffer=
:PROPERTIES:
:TS:       <2013-09-28 12:22PM>
:ID:       yzpkt73039g0
:END:
** constructors
:PROPERTIES:
:TS:       <2013-09-28 08:22PM>
:ID:       6fsb1gp039g0
:END:
#+name: @imp:TBuffer
#+begin_src pascal

  constructor TBuffer.Create( w, h : cardinal );
    begin
      inherited Create( w, h );
      nodes := TTextNodes.Create;
    end;

#+end_src

** =ITextTile= methods
:PROPERTIES:
:TS:       <2013-09-28 08:21PM>
:ID:       3awb6ep039g0
:END:
#+name: @imp:TBuffer
#+begin_src pascal

  function TBuffer.GetLength : cardinal;
    begin
      result := nodes.Length;
    end;

  function TBuffer.GetLine(i:cardinal) : string;
    begin
      result := nodes[i];
    end;

  procedure TBuffer.SetLine(i:cardinal; s:string);
    begin
      nodes[i] := s;
    end;

  procedure TBuffer.AddLine(s:string);
    begin
      nodes.append(s)
    end;

  procedure TBuffer.InsLine(i:cardinal; s:string);
    begin
      nodes.InsertAt(i, s)
    end;

  procedure TBuffer.DelLine(i:cardinal);
    begin
      nodes.DeleteAt(i);
    end;

#+end_src


* CLASS Editor                                                           :ed:
:PROPERTIES:
:TS: <2013-01-11 08:46AM>
:ID: sghf0g70kzf0
:END:
** constructor
:PROPERTIES:
:TS: <2013-01-12 07:37AM>
:ID: 7hd3ldk0lzf0
:END:
#+name: @imp:ed
#+begin_src pascal
  constructor editor.create;
    begin
      inherited;
      x := 0;
      y := 0;
      w := kvm.width;
      h := kvm.height;
      self.buf := TBuffer.create(w, h - 1);
      topline := 0;
      position := 0;
      filename := '';
      message  := 'welcome to minneron.';
    end;
#+end_src

** TODO «tokenizer» interface { extract tokenizer stuff }
:PROPERTIES:
:TS: <2013-01-11 05:05AM>
:ID: er586tb1jzf0
:END:
#+name: @imp:ed
#+begin_src pascal

  procedure editor.parse( var txt : text );
    var n : cardinal; line : string;
    begin
      while not eof( txt ) do begin
        readln( txt, line );
        self.buf.AddLine( line );
{
        words := nodelist.create;
        if length( line ) > 0 then
          for n := 1 to stri.nwords( line ) do begin
            log.debug([ 'word ', n, ' : ', stri.wordn( line, n ) ]);
            words.append( wrap( stri.wordn( line, n )));
          end;
        self.buf.append( li.lisnode.create( words ));
        log.debug([ 'words: ', n, ' line: "' + line + '" length: ', length( line ) ]);
}
      end;
      // li.print( lisnode.create( self.buf ));
    end;
#+end_src

** disk interface
:PROPERTIES:
:TS: <2013-01-12 07:38AM>
:ID: f41aqek0lzf0
:END:
#+name: @imp:ed
#+begin_src pascal
  function editor.Load( path : string ) : boolean;
      var txt : text;
    begin
      result := fs.exists( path );
      if result then
        begin
          //  need to check for io errors in here
          assign( txt, path );
          reset( txt );
          self.parse( txt );
          close( txt );
          self.filename := path;
        end
      else message := 'couldn''t load "' + path + '"';
    end; { editor.load }

  function editor.save : boolean;
      var txt: text; i : cardinal;
    begin
      assign( txt, self.filename );
      rewrite( txt );
      for i := 0 to self.buf.length -1 do writeln(txt, buf[i]);
      close( txt );
      result := true; // TODO error checking
      message := filename + ' saved.';
    end;

  function editor.save_as( path : string ) : boolean;
      var oldname : string;
    begin
      oldname := self.filename;
      self.filename := path;
      result := self.save;
      if not result then self.filename := oldname
    end;

#+end_src

** display
:PROPERTIES:
:TS: <2013-01-12 07:39AM>
:ID: 1oyksgk0lzf0
:END:
*** editor.show
:PROPERTIES:
:TS: <2013-01-13 04:33AM>
:ID: l0l8ixr0mzf0
:END:
#+name: @imp:ed
#+begin_src pascal
  procedure editor.show;
    var
      ypos : cardinal;
      line : cardinal;
      <<ed/show/curpos>>
      <<ed/show/gutter>>
      <<ed/show/PlaceEditor>>
      <<ed/show/line>>
    begin
      <<ed/show:main>>
    end;
#+end_src
**** «ed/show/curpos»
:PROPERTIES:
:TS: <2013-01-13 04:34AM>
:ID: j4k6vzr0mzf0
:END:
#+name: ed/show/curpos
#+begin_src pascal
  procedure show_curpos;
  begin
    cwritexy( 0, 0,
              '|!b' +
              '|B[|C' + flushrt( n2s( self.position ), 6, '.' ) +
              '|w/|c' + flushrt( n2s( self.buf.length ), 6, '.' ) +
              '|B]|Y ' + self.message +
           '|%' );
    self.message := '';
  end;
#+end_src
**** «ed/show/gutter»
:PROPERTIES:
:TS: <2013-01-13 04:34AM>
:ID: dfe840s0mzf0
:END:
#+name: ed/show/gutter
#+begin_src pascal
  procedure show_gutter( s : string );
    var color : char = 'c';
  begin
    if line = position then color := 'C';
    cwritexy( 0, ypos, '|k|!' + color + s + '|!k|w' );
  end;
#+end_src
**** «ed/show/edit»
:PROPERTIES:
:TS: <2013-01-13 04:34AM>
:ID: de5ca0s0mzf0
:END:
#+name: ed/show/PlaceEditor
#+begin_src pascal
  procedure PlaceEditor;
  begin
    { This simply positions the input widget. }
    with self.led do begin
      x := cw.cur.x;
      y := cw.cur.y;
      tcol := $080f;
      dlen := cw.max.x - cw.cur.x
    end;
  end;
#+end_src
**** «ed/show/line»
#+name: ed/show/line
#+begin_src pascal
  procedure show_line(s:string);
    begin
      cwrite(s + '|!k|%' );
    end;
#+end_src
**** TODO «ed/show/node» { move =show_node= logic to =TBuffer= }
:PROPERTIES:
:TS: <2013-01-13 04:48AM>
:ID: 51l0hns0mzf0
:END:
#+name: show_node
#+begin_src pascal

  procedure show_list(node:li.lisnode);
    var
      tok   : string;
      d2re  : cardinal; { distance to right edge }
      child : li.node;
    begin
      for child in node.lis do
        begin
          d2re := cw.scr.w - cw.cur.x;
          if child is li.strnode
            then tok := (child as li.strnode).str
            else tok := '|r<??>|w';
          tok += '|b.|w'; //  b/c tokenizer strips ws
          {-- word wrapping --}
          if length( tok ) < d2re then cwrite( tok )
          else begin
            cwrite( '|!k|%' ); // clreol
            inc( ypos );
            show_gutter( '   ' );
            { truncate, in case token is wider than the whole editor }
            cwrite( stri.trunc( tok, d2re ));
          end
        end;
    end;

#+end_src

**** «ed/show:main»
:PROPERTIES:
:TS: <2013-01-13 04:40AM>
:ID: 9u9baas0mzf0
:END:
#+name: ed/show:main
#+begin_src pascal
    begin
      HideCursor;
      cwrite('|w|!b');
      //todo  fillbox( 1, 1, kvm.maxX, kvm.maxY, $0F20 );
      show_curpos;
      ypos := 1; // line 0 is for the status / cursor position

      line := topline;
      repeat
        show_gutter( flushrt( n2s( line ), 3, ' ' ));
        if line = position then PlaceEditor
        else show_line(buf[line]);
        inc( ypos ); inc(line)
      until ( ypos >= self.h ) or ( line = buf.length );
      { fill in extra space if the file is too short }
      while ypos < self.h do begin
        cwritexy( 0, ypos, '|!K|%' );
        inc( ypos )
      end;
      led.show;
      // ShowCursor;
    end;
#+end_src
*** the 'camera'
:PROPERTIES:
:TS: <2013-01-17 07:42AM>
:ID: 34mdyie1rzf0
:END:
**** «updateCamera»
:PROPERTIES:
:TS: <2013-01-17 07:42AM>
:ID: 3j1bdje1rzf0
:END:
#+name: @imp:ed
#+begin_src pascal
  procedure editor.updatecamera;
    var screenline : word;
    begin
      assert(topline <= position );
      screenline := position - topline;
      if ( screenline < 5 ) and ( topline > 1 ) then
        begin
          dec(topline)
          //  scrolldown1(1,80,y1,y2,nil);
          //  scrolldown1(1,80,14,25,nil);
        end
      else if ( screenline > self.h - 5 )
        and ( self.topline < self.buf.length ) then
        begin
          inc( topline );
          //  scrollup1(1,80,y1,y2,nil);
          //  scrollup1(1,80,14,25,nil);
        end
    end;
#+end_src

** cursor movement interface
:PROPERTIES:
:TS: <2013-01-12 07:41AM>
:ID: 34ca2jk0lzf0
:END:
*** home/end
:PROPERTIES:
:TS: <2013-01-17 07:32AM>
:ID: spi8g1e1rzf0
:END:

#+name: @imp:ed
#+begin_src pascal

  procedure editor.home;
  begin
    if self.buf.length = 0 then exit;
    position := 0;
    topline := 0;
    led.work := buf[ 0 ];
  end;

  procedure editor._end;
    var i : byte;
  begin
    position := self.buf.length - 1;
    topline := position;
    for i := kvm.maxY div 2 downto 1 do dec(topline);
  end;
#+end_src

*** up/down motion
:PROPERTIES:
:TS: <2013-01-17 07:31AM>
:ID: t7d7f0e1rzf0
:END:
#+name: @imp:ed
#+begin_src pascal

  procedure editor.grabLine;
   { TODO: see if this code belongs in TBuffer. Else delete it.
    function to_string : string;
      var first : boolean = true; var this, node : li.node;
      begin
        result := '';
        this := self.position.value;
        case this.kind of
          KSTR :
             result := (this as li.strnode).str;
          KLIS :
            for node in (this as li.lisnode).lis do
              begin
                if first then first := false
                else result += ' ';
                result += (node as li.strnode).str;
              end
          else pass
        end
      end;
     }
    begin
      self.led.work := self.buf[self.position]
    end;

  procedure editor.arrowup;
    begin
      keepInput;
      if self.position > 0 then
        begin
          dec(self.position);
          moveInput;
        end;
      grabLine;
    end;

  procedure editor.arrowdown;
    begin
      keepInput;
      if self.position + 1 < self.buf.length then
        begin
          inc(self.position);
          moveInput;
        end;
      grabLine;
    end;

  procedure editor.pageup;
    var c : byte;
    begin
      for c := 1 to h do arrowup;
    end;

  procedure editor.pagedown;
    var c : byte;
    begin
      for c := 1 to h do arrowdown;
    end;

#+end_src

** TODO managing the zinput control
:PROPERTIES:
:TS: <2013-01-17 07:50AM>
:ID: qcp4cc00szf0
:END:
#+name: @imp:ed
#+begin_src pascal
  procedure editor.keepInput;
  begin
    buf[position] := led.value
  end;
#+end_src

#+name: @imp:ed
#+begin_src pascal
  procedure editor.moveInput;
  begin
    updateCamera;
  end;
#+end_src

** modal interface
:PROPERTIES:
:TS: <2013-01-12 07:41AM>
:ID: lxfhwjk0lzf0
:END:

#+name: @imp:ed
#+begin_src pascal
  procedure editor.run;
    var done : boolean = false; ch : char;
    begin
      xpc.log.debug([ 'about to enter create' ]);
      self.led := ui.zinput.create;
      xpc.log.debug([ 'about to go home' ]);
      self.home;
      xpc.log.debug([ 'about to enter loop' ]);
      repeat
        show;
        case kbd.readkey(ch) of
          ^C : done := true;
          ^N : arrowdown;
          ^P : arrowup;
          ^M : newline;
          ^D : delete;
          ^S : save;
          ^V : pagedown;
          ^U : pageup;
          #0 : case kbd.readkey(ch) of
                      #72 : arrowup; // when you press the UP arrow!
                      #80 : arrowdown; // when you press the DOWN arrow!
                      #71 : home;
                      #79 : _end;
                      #73 : pageup;
                      #81 : pagedown;
                      ^M  : newline;
                      else led.handlestripped( ch ); led.show;
                    end;
          else led.handle( ch ); led.show;
        end;
        led.isdone := false; // TODO: split lines on ^M/^J
      until done;
    end;
#+end_src

** multi-line editor commands
:PROPERTIES:
:TS: <2013-01-12 07:42AM>
:ID: pn7bmlk0lzf0
:END:

#+name: @imp:ed
#+begin_src pascal
  procedure editor.newline;
    begin
      buf.InsLine(position, led.str_to_end );
      led.del_to_end;
      arrowdown;
      led.to_start;
    end;

  procedure editor.delete;
    begin
      if led.at_end and (position + 1 < buf.length) then
        begin
          led.work += buf.GetLine(position+1);
          buf.DelLine(position+1);
        end
      else led.del
    end;

#+end_src
