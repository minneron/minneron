#+title: minneron : planning view (implementation plans for new features)
#+tags: pl min
#+date: <2013-01-11 11:43AM>

* [7/7] Iteration 0.01
:PROPERTIES:
:TS:       <2014-04-17 02:37AM>
:ID:       xq5gl8q0fgg0
:END:
** /changes to the plan this iteration/
:PROPERTIES:
:TS:       <2014-04-17 02:27AM>
:ID:       rh2agqp0fgg0
:END:
- implemented simple shell/repl instead of form for node creation.
- spent a bunch of time bugfixing in =kvm=, =TGrid2D= and =TTermView=
- implemented =umsg= to simplify message dispatch
- deferred [[*search%20nodes][search nodes]] for now
- replaced it with
** DONE edit node
  :PROPERTIES:
  :TS:       <2014-03-30 11:55PM>
  :ID:       cpn5vgc1sfg0
  :END:
- [X] Show existing minneron editor widget.
- [X] Load node content from the database.
- [X] Save content to the database.
- [X] Preserve version history.

** DONE [4/4] create edge
  :PROPERTIES:
  :TS:       <2014-03-30 11:56PM>
  :ID:       gwrfrhc1sfg0
  :END:
*** DONE (had to actually get the little stack repl working)
:PROPERTIES:
:TS:       <2014-04-11 05:49AM>
:ID:       df8c3o317gg0
:END:
*** DONE (had to fix a bunch of kvm/gridterm problems)
:PROPERTIES:
:TS:       <2014-04-11 05:46AM>
:ID:       m4ze7i317gg0
:END:
*** DONE [3/3] show the new stack-based ui (TImpShell and TImpTerm)
:PROPERTIES:
:TS:       <2014-04-06 08:24AM>
:ID:       vimfxvg01gg0
:END:
**** DONE smudge the terminal on write
:PROPERTIES:
:TS:       <2014-04-11 06:00AM>
:ID:       615fd5417gg0
:END:
**** DONE move tforthapp.step into an (.update) method
:PROPERTIES:
:TS:       <2014-04-11 05:59AM>
:ID:       g2qeq3417gg0
:END:
**** DONE it would be nice to treat timpterm as an ITerm directly.
:PROPERTIES:
:TS:       <2014-04-11 06:06AM>
:ID:       rlkbhf417gg0
:END:
*** DONE invoke 'create edge' behavior from the repl.
:PROPERTIES:
:TS:       <2014-04-06 08:25AM>
:ID:       fcij8xg01gg0
:END:
**** DONE create an impforth module for undk (uimpndk)
:PROPERTIES:
:TS:       <2014-04-13 01:37PM>
:ID:       jzua8x61agg0
:END:
- create a TImpModule
- implement 'attach' with imp.addop(name, self.xyz)
** DONE tab between controls
  :PROPERTIES:
  :TS:       <2014-03-30 11:56PM>
  :ID:       04zgeic1sfg0
  :END:
*** NOTE .
The links on the screen should be kept in a list or array, and you should be able to cycle through them with some kind of shortcut (tab, probably). Really this is no different from any other menu except for the way it's laid out.

Links embedded in the page itself will come later, but follow the same principle.

Impworld should already have a concept of focus.

*** DONE implement a ring for focus widgets
:PROPERTIES:
:TS:       <2014-04-13 10:34PM>
:ID:       37ldm8h0bgg0
:END:
*** DONE add GainFocus/LoseFocus methods
:PROPERTIES:
:TS:       <2014-04-13 10:36PM>
:ID:       jst73ch0bgg0
:END:
** DONE share the keyboard handler between the various menu widgets
:PROPERTIES:
:TS:       <2014-04-15 08:51AM>
:ID:       lbw0pbb0dgg0
:END:

** DONE show incoming links
  :PROPERTIES:
  :TS:       <2014-03-30 11:56PM>
  :ID:       8ead4ic1sfg0
  :END:
This is just another list widget (dbmenu)
The OnChoice callback should trigger loading a new page.
You should also be able to delete items.

** DONE show outgoing links
  :PROPERTIES:
  :TS:       <2014-03-30 11:56PM>
  :ID:       wai5aic1sfg0
  :END:
Exactly the same as incoming links.

** DONE delete edge
  :PROPERTIES:
  :TS:       <2014-03-30 11:56PM>
  :ID:       4bogzhc1sfg0
  :END:
This would just be another item you could use.

* [0/4] Iteration 0.02
:PROPERTIES:
:TS:       <2014-04-23 01:23AM>
:ID:       ie4dh9i0ngg0
:END:
** TODO jumptrees
:PROPERTIES:
:TS:       <2014-04-23 01:24AM>
:ID:       k7y2kai0ngg0
:END:
*** NOTE How is the tree loaded for the current tree control?
:PROPERTIES:
:TS:       <2014-04-23 01:41AM>
:ID:       xewe13j0ngg0
:END:
- in min.pas, =rsOutLn= is opened with a flat query.
- toggling the visibility issues a db update
- rendering is just like with the grid control, except for the +/- sigils.
- but how it works now shouldn't matter, because the tree view should accept a tree cursor.

*** NOTE How should I implement hyperlinked trees while they're in ram?
:PROPERTIES:
:TS:       <2014-04-23 01:47AM>
:ID:       r5niscj0ngg0
:END:
- In ram, it should be a DOM or ringtree structure.
- A generic tree walker / tree builder interface should handle the loading and saving.

*** NOTE What about links between the trees?
:PROPERTIES:
:TS:       <2014-04-23 01:52AM>
:ID:       ysyc8lj0ngg0
:END:
- In order to make hyperlinks, I probably need a smarter token editor.

*** NOTE How should I manage the text editor when my nodes are hierarchies?
:PROPERTIES:
:TS:       <2014-04-23 02:32AM>
:ID:       ype5cgl0ngg0
:END:
- Instead of a line editor, I'd have a node editor.
- Text in the node would be converted to a list of tokens.
- Each token should know its own width and color.
- Inline markup can be done with begin/end tokens.
- Can just redisplay the whole thing for now.
- If size of the node changes due to lines being added or removed, then I need to notify the parent control so it redisplays.

*** NOTE How should I store trees when they're in the database?
:PROPERTIES:
:TS:       <2014-04-23 01:56AM>
:ID:       dn487rj0ngg0
:END:
several options:
- I could store each node as an html string, as I did with gridliner.
- I could store a tree of references to individual words/symbols/tokens.
  - /kind of nice because the text would become its own index./
  - dom-like tags would just be a different kind of node in the db
  - how to distinguish elements, attributes, comments, text?
    - each node in the tree could just have a type tag (all nodes do!)
    - could add an extra column for namespace and attribute pairs
    - link nodes could just be normal nodes. some might just happen to be of the "URL" type.

*** NOTE Should each node cache its own display? (no)
:PROPERTIES:
:TS:       <2014-04-23 02:44AM>
:ID:       th4j80m0ngg0
:END:
No, the blocks are quick to regenerate. /Maybe/ I could cache the whole 
outliner control for scrolling, but that's probably best done by retroterm.

*** TODO [0/8] implement the jumptree editor (outliner)
:PROPERTIES:
:TS:       <2014-04-23 03:41AM>
:ID:       5ppddno0ngg0
:END:

**** TODO make mned.TEditor a subclass of the grid component
:PROPERTIES:
:TS:       <2014-04-23 05:25AM>
:ID:       l2u0vft0ngg0
:END:
**** TODO move camera stuff from mned to grid control
:PROPERTIES:
:TS:       <2014-04-23 05:15AM>
:ID:       eei0vys0ngg0
:END:

**** TODO use uoutdoc to load/save trees
:PROPERTIES:
:TS:       <2014-04-23 05:17AM>
:ID:       tovhm3t0ngg0
:END:

**** TODO convert trees -> visible boxes
:PROPERTIES:
:TS:       <2014-04-23 03:42AM>
:ID:       qjkb9po0ngg0
:END:

**** TODO visible boxes -> [tokens]
:PROPERTIES:
:TS:       <2014-04-23 03:41AM>
:ID:       j3j1rno0ngg0
:END:

**** TODO wordwrap :: boxed [tokens] -> sized boxes
:PROPERTIES:
:TS:       <2014-04-23 03:44AM>
:ID:       2di5mro0ngg0
:END:

**** TODO maintain a ring or gap buffer of tokens
:PROPERTIES:
:TS:       <2014-04-23 03:43AM>
:ID:       7v8fgqo0ngg0
:END:

**** TODO some tokens should not be editable
:PROPERTIES:
:TS:       <2014-04-23 03:49AM>
:ID:       hp7dw0p0ngg0
:END:








* Tokenizers
:PROPERTIES:
:TS:       <2014-04-23 03:57AM>
:ID:       pco2sdp0ngg0
:END:

** converting regular expressions into state machines
:PROPERTIES:
:TS:       <2014-04-23 03:58AM>
:ID:       ycyg9fp0ngg0
:END:

video reference: https://www.youtube.com/watch?v=GwsU2LPs85U

| combinator  | graph                                |
|-------------+--------------------------------------|
| alt([x, y]) | { 0: { x: 1, y: 1 }, 1 : { } }       |
| seq([x, y]) | { 0: { x: 1 }, 1: { y: 2 }, 2: { } } |
| orp([x])    | { 0: { x: 1 } }                      |

** converting nfa -> dfa
:PROPERTIES:
:TS:       <2014-04-23 04:57AM>
:ID:       2oj105s0ngg0
:END:
video reference: https://www.youtube.com/watch?v=taClnxU-nao


** implementation
:PROPERTIES:
:TS:       <2014-04-23 05:02AM>
:ID:       10zckds0ngg0
:END:





** TODO universal inbox
:PROPERTIES:
:TS:       <2014-04-23 01:24AM>
:ID:       tu8gtai0ngg0
:END:
** TODO goalstacks
:PROPERTIES:
:TS:       <2014-04-23 01:24AM>
:ID:       2ns02bi0ngg0
:END:
** TODO implish source nodes
:PROPERTIES:
:TS:       <2014-04-23 01:24AM>
:ID:       pjceebi0ngg0
:END:



* TODO export to org
  :PROPERTIES:
  :TS:       <2014-03-30 11:57PM>
  :ID:       kpe6zic1sfg0
  :END:
For this iteration, the pages are unstructured, so it's just a matter of saving them with headlines, types and timestamps.


* -------------
* TODO search nodes
  :PROPERTIES:
  :TS:       <2014-03-30 11:57PM>
  :ID:       ctq8ric1sfg0
  :END:
This just means a basic ransacker-like search engine.
Alternatively, enable full text indexing in sqlite.
* TODO [0/1] allow pushing node strings with spaces, etc to the stack
:PROPERTIES:
:TS:       <2014-04-06 08:24AM>
:ID:       1g10owg01gg0
:END:

** TODO clean up the parser so it's state driven
:PROPERTIES:
:TS:       <2014-04-12 11:55AM>
:ID:       1tf584m09gg0
:END:

* TODO integrate with ptckvm to get a nice full screen console
:PROPERTIES:
:TS:       <2014-04-12 03:17PM>
:ID:       cljcygv09gg0
:END:

* TODO TImpModule instances should register themselves with 'published'
:PROPERTIES:
:TS:       <2014-04-13 01:45PM>
:ID:       b7hixb71agg0
:END:

* TODO fix TEditor 'out of bounds error' after changing pages   :bug:
:PROPERTIES:
:TS:       <2014-04-14 08:49PM>
:ID:       iv3fcgs0cgg0
:END:
Open minneron to the help page and move the cursor down several lines. Then use ^G to go to an empty page. The cursor maintains its old position, and attempting to move it will trigger an exception.

* TODO fix display of the last line of mned.TEditor
:PROPERTIES:
:TS:       <2014-04-14 02:20PM>
:ID:       cqk6pga0cgg0
:END:
The root problem here is that I need to truncate the colored text output, but =cw.cwpad()= doesn't correctly understand the length of the string.

The fix would be to turn =cwlen= into a proper tokenizer, either by hand or using regular expressions.

#+begin_src diff
--- a/minneron/mned.pas
+++ b/minneron/mned.pas
@@ -156,10 +156,10 @@ procedure TEditor.Render;
        if line = position then PlaceEditor
        else draw_line(buf[line]);
        inc( ypos ); inc(line)
-      until ( ypos = self.h-1 ) or ( line = buf.length )
+      until ( ypos = self.h ) or ( line = buf.length )
     else ypos := 2;
     { fill in extra space if the file is too short }
-    while ypos < self.h-1 do begin
+    while ypos < self.h do begin
       cwritexy( 0, ypos, '|!k|%' );
       inc( ypos )
     end;
#+end_src

* TODO fix keyboard ^A behavior (file:~/f/packages/rtl-console/src/unix)
:PROPERTIES:
:TS:       <2014-04-17 02:05PM>
:ID:       xjoahh70ggg0
:END:

* TODO tag components so they register themselves
:PROPERTIES:
:TS:       <2014-04-11 06:32AM>
:ID:       48t9qn517gg0
:END:
I'm talking about .updatable, .drawable, .focusable, .haskeymap, .scriptable, etc. This could be done with QueryInterface, or just simple tags.

The idea is that these components would then be automatically registered in the appropriate lists of things to draw, or to create keymaps for, or whatever..

* TODO load component layouts from external resource description
:PROPERTIES:
:TS:       <2014-04-11 06:27AM>
:ID:       i4x0le517gg0
:END:
* TODO have each row in the termview store a set of dirty columns
:PROPERTIES:
:TS:       <2014-04-11 06:02AM>
:ID:       nrx5s9417gg0
:END:
* TODO [2/4] block-based display plan (single column)           :ed007:
:PROPERTIES:
:TS: <2013-01-01 10:35PM>
:ID: tm74ek017zf0
:END:
** displaying documents                                         :ui:
:PROPERTIES:
:TS: <2013-01-03 04:13PM>
:ID: qbighi00azf0
:END:
*** the scene graph                                           :later:
:PROPERTIES:
:TS: <2013-01-03 04:16PM>
:ID: iza8lm00azf0
:END:

The block objects serve a secondary purpose, in that they can recursively display themselves (just like widgets in gamesketchlib or whatever).

However, document structure and display structure needn't coincide: nodes might be hidden, or show up at arbitrary coordinates, etc.

So it's likely that each node would have a corresponding display object, which understood coordinates, geometry, etc.

In particular, two clones of the same node would have different geometries and coordinates.

Note also that display nodes may not be textual: raster images, vector shapes, and dialog widgets are all perfectly valid options.
** DONE create =ITextTile= to give the text cursor a nice flat list.
:PROPERTIES:
:TS:       <2013-09-26 05:12PM>
:ID:       hl6740z009g0
:END:
The idea here is that =ITextTile= provides an arbitrary interface for creating widgets that /look/ like editable lines of text, so the text cursor can move up and down in what appears to be a flat list of lines.

** DONE [7/7] Refactor the current editor/cursor behavior to use =ITextTile=
:PROPERTIES:
:TS:       <2013-09-26 05:20PM>
:ID:       fuzehdz009g0
:END:
*** DONE =show_node= should take node as parameter and not touch =cur=
:PROPERTIES:
:TS:       <2013-09-27 03:52PM>
:ID:       wf9dafb119g0
:END:

*** DONE =show_node= should dispatch to other functions, based on type
:PROPERTIES:
:TS:       <2013-09-27 03:53PM>
:ID:       ak2ddhb119g0
:END:

*** DONE wrap the buffer as a =TBuffer= but expose currently used methods.
:PROPERTIES:
:TS:       <2013-09-28 12:29PM>
:ID:       ptog1k3039g0
:END:
Well, I accomplished this by making it a subclass of =li.node=.
The problem is that several parts of the editor use the object's =cursor= directly.

*** DONE [2/2] Refactor =editor= and =TBuffer= so the cursor isn't used directly.
:PROPERTIES:
:TS:       <2013-09-28 01:06PM>
:ID:       il78a95039g0
:END:
**** DONE Replace the =top= and =position= cursors with simple integers.
:PROPERTIES:
:TS:       <2013-09-28 01:07PM>
:ID:       bkhh3b5039g0
:END:

**** DONE Add =InsLine= and =DelLine= methods to =TBuffer= (and =ITextTile=?)
:PROPERTIES:
:TS:       <2013-09-28 01:08PM>
:ID:       68x2qc5039g0
:END:

*** DONE have =TBuffer= implement =ITextTile=
:PROPERTIES:
:TS:       <2013-09-28 12:40PM>
:ID:       z0g3a24039g0
:END:

*** DONE have buffer.nodelist use the =rings= unit instead of =li=
:PROPERTIES:
:TS:       <2013-09-28 07:35PM>
:ID:       iek529n039g0
:END:

*** DONE implement something like =make_cursor= to walk =ITextTile= objects
:PROPERTIES:
:TS:       <2013-09-28 12:13PM>
:ID:       t3b3ws2039g0
:END:
**** NOTE that something is a simple for loop. :)
:PROPERTIES:
:TS:       <2013-09-28 10:09PM>
:ID:       wuihoeu039g0
:END:
** TODO [3/5] break the display down into =impworld= morphs
:PROPERTIES:
:TS:       <2013-09-30 12:16AM>
:ID:       9ad5js1059g0
:END:
*** DONE [2/2] implement =step= (task system / mnml / impworld )
:PROPERTIES:
:TS: <2013-01-17 08:20AM>
:ID: zwuf3p10szf0
:END:
**** DONE break =TEditor.run= into =.loop= and =.step=
:PROPERTIES:
:TS:       <2013-10-01 12:02AM>
:ID:       u80as8h069g0
:END:
**** DONE merge =mnml= into the main minneron code
:PROPERTIES:
:TS:       <2013-10-01 03:34AM>
:ID:       ojmk32r069g0
:END:
*** DONE [5/5] merge =impworld= and =vorunati= to add multiple objects to the scene
:PROPERTIES:
:TS:       <2013-10-01 02:40AM>
:ID:       nj157lo069g0
:END:
**** DONE get the two mainloops running simultaneously
:PROPERTIES:
:TS:       <2013-10-01 06:57PM>
:ID:       s0p1d8j079g0
:END:
**** DONE standardize the interface
:PROPERTIES:
:TS:       <2013-10-01 06:57PM>
:ID:       p11dw8j079g0
:END:
#+begin_src pascal
  if init then
    begin
      repeat step; render until done;
      exit;
    end;
#+end_src*
**** DONE migrate impworld from objects to classes
:PROPERTIES:
:TS:       <2013-10-01 09:03PM>
:ID:       3b5043p079g0
:END:
**** DONE have =impworld.actor= implement =IVorTask=
:PROPERTIES:
:TS:       <2013-10-01 07:00PM>
:ID:       jq769ej079g0
:END:
**** DONE move =impworld.step= into =mnml= itself
:PROPERTIES:
:TS:       <2013-10-01 07:02PM>
:ID:       5nu40hj079g0
:END:
*** DONE let the combined loop handle =TEditor='s lifecycle.
:PROPERTIES:
:TS:       <2013-10-01 01:46PM>
:ID:       orvbiu4079g0
:END:

*** TODO use sub-windows to separate the display
:PROPERTIES:
:TS:       <2013-10-01 06:58PM>
:ID:       ssgezaj079g0
:END:

*** TODO implement simple tiling
:PROPERTIES:
:TS:       <2013-10-01 02:41AM>
:ID:       3qk0olo069g0
:END:
* TODO [0/2] create outlines and store them in a database
:PROPERTIES:
:TS:       <2013-10-06 12:44AM>
:ID:       ax2k15d1c9g0
:END:
*** TODO integrate =pasout= into minneron so I have a simple tree editor
:PROPERTIES:
:TS:       <2013-09-30 12:19AM>
:ID:       wvuesy1059g0
:END:
*** TODO implement trees with closure tables in sqlite/sqldb
:PROPERTIES:
:TS:       <2013-10-06 12:45AM>
:ID:       qjz9j6d1c9g0
:END:
* TODO [0/10] create a simple interactive grammar builder
:PROPERTIES:
:TS:       <2013-09-30 12:22AM>
:ID:       v10jy22059g0
:END:
** TODO introduce the token type (tagged string span)
:PROPERTIES:
:TS:       <2013-09-30 12:34AM>
:ID:       83p89n2059g0
:END:

** TODO using =pre= or =imprex=, build a tokenizer interactively
:PROPERTIES:
:TS:       <2013-09-30 12:35AM>
:ID:       8cfgnp2059g0
:END:

** TODO using the tokenizer, apply syntax-highlighting to the buffer
:PROPERTIES:
:TS:       <2013-09-30 12:36AM>
:ID:       icbieq2059g0
:END:

** TODO introduce the element type (nested span)
:PROPERTIES:
:TS: <2013-01-12 02:50PM>
:ID: 3xyfre41lzf0
:END:
** TODO modify =pre= or =imprex= so that matching builds an element tree
:PROPERTIES:
:TS:       <2013-09-30 12:24AM>
:ID:       noyae62059g0
:END:
** TODO render the parse tree in a second, read only tree window
:PROPERTIES:
:TS:       <2013-09-30 12:25AM>
:ID:       kb1jz72059g0
:END:

** TODO use the grammar tree buffer + a cursor to drive a parser
:PROPERTIES:
:TS:       <2013-09-30 12:26AM>
:ID:       h1k7h92059g0
:END:

** TODO using =pre= / =imprex=, lex and parse the source buffer
:PROPERTIES:
:TS: <2013-01-10 09:37AM>
:ID: uwf83b81izf0
:END:
** TODO automatically update the parse tree when grammar changes
:PROPERTIES:
:TS:       <2013-09-30 12:23AM>
:ID:       46w8l42059g0
:END:

** TODO display blocks corresponding to the parsed inner nodes
:PROPERTIES:
:TS: <2013-01-10 09:38AM>
:ID: xzn4eb81izf0
:END:
elements are sequences/strings with a 1-dimensional length
blocks are rectangles with a 2-dimensional bounding box
* TODO [5/9] word wrap implementation                           :ed004:
:PROPERTIES:
:TS: <2013-01-11 11:45AM>
:ID: hnyjxqf0kzf0
:END:
** DONE remove old «ed/show/line» { line based version }
:PROPERTIES:
:TS: <2013-01-13 04:34AM>
:ID: 8lf6f0s0mzf0
:END:
#+name: ed/show/node/0
#+begin_src pascal
  procedure show_line( line : string );
  begin
    cwrite( stri.trunc( line, cw.scr.w - cw.cur.x ));
    cwrite( '|%' ); // clreol
  end;

  procedure show_node;
  {test against li.strnode to distinguish from anchors, which will no longer use }
  if cur.value.inheritsfrom( li.strnode ) then
  begin
    show_nums;
    line := li.strnode( cur.value ).str;
    if cur.index = position.index then show_edit( line )
    else show_line( line );
    inc( ypos )
  end;
#+end_src

** DONE { lines as lists implementation }
:PROPERTIES:
:TS: <2013-01-13 05:15AM>
:ID: fjlidwt0mzf0
:END:
new =show_node= version: id:51l0hns0mzf0

** DONE implement new ed/show/block with wrapping and dynamic height
:PROPERTIES:
:TS: <2013-01-13 04:52AM>
:ID: w1i9ats0mzf0
:END:
** DONE break input lines down into tokens
:PROPERTIES:
:TS: <2013-01-11 03:17AM>
:ID: cpvbjt61jzf0
:END:

** DONE show placeholder for line numbers on wrap
:PROPERTIES:
:TS: <2013-01-13 05:05AM>
:ID: 2va21gt0mzf0
:END:
** TODO resize and relocate the editor based on the cursor position
:PROPERTIES:
:TS: <2013-01-13 07:16PM>
:ID: 424359i0nzf0
:END:
*** TODO track the x and y coordinates of the cursor
:PROPERTIES:
:TS: <2013-01-17 07:35AM>
:ID: 4oec67e1rzf0
:END:
*** TODO divide each line's list of tokens into separate nodes for each virtual line
:PROPERTIES:
:TS: <2013-01-17 07:35AM>
:ID: kf6aq7e1rzf0
:END:
** TODO add an offset to the cursor type
:PROPERTIES:
:TS: <2013-01-10 09:37AM>
:ID: uzh4ta81izf0
:END:
** TODO move line wrapping logic from =ed.show_list= to =TBuffer=
:PROPERTIES:
:TS:       <2013-09-28 12:15PM>
:ID:       wdwh7w2039g0
:END:
** TODO move tokenization logic from =editor.parse= to =TBuffer=
:PROPERTIES:
:TS:       <2013-09-28 12:18PM>
:ID:       vbo8713039g0
:END:
* TODO generalized 2d layout
:PROPERTIES:
:TS:       <2013-09-28 10:22PM>
:ID:       89s9fzu039g0
:END:
** TODO generalize wrap algorithm from ed004 to arbitrary blocks
:PROPERTIES:
:TS: <2013-01-13 04:53AM>
:ID: ozhfqus0mzf0
:END:
* TODO [0/2] command interpreter plan                           :cmd:
:PROPERTIES:
:TS: <2013-01-01 10:35PM>
:ID: 6v09mj017zf0
:END:
** TODO number-based dispatch
:PROPERTIES:
:TS: <2013-01-10 07:47AM>
:ID: va99k631izf0
:END:
** TODO string-based dispatch
:PROPERTIES:
:TS: <2013-01-10 07:46AM>
:ID: if8k2631izf0
:END:
* TODO [0/1] table editor implementation                        :ed011:
:PROPERTIES:
:TS:       <2012-11-10 02:30PM>
:ID:       uhv4ml01axf0
:END:
** load arrays of nodes
:PROPERTIES:
:TS: <2013-01-11 12:01PM>
:ID: nhqb8ig0kzf0
:END:
** TODO [0/0] merge in file:~/r/work/griddemo.pas
:PROPERTIES:
:TS:       <2012-11-13 10:48AM>
:ID:       re6c12o0exf0
:END:
* TODO [0/0] database implementation
:PROPERTIES:
:TS: <2013-01-11 12:01PM>
:ID: xob8dhg0kzf0
:END:

* TODO planned enhancements for =mnml=
:PROPERTIES:
:TS:       <2013-05-15 12:14PM>
:ID:       m2k24e2134g0
:END:
** TODO create a module for scheduled tasks
:PROPERTIES:
:TS:       <2013-05-15 10:47AM>
:ID:       ydr91ey034g0
:END:
#+begin_src recur
  function  ( pcmd : callable; interval, times, priority : integer ) : TTaskId;
  function  change( task : callable; interval, times, priority : integer ) : TTaskId;
#+end_src

** TODO create a unit to handle module definititions
:PROPERTIES:
:TS:       <2013-05-15 10:48AM>
:ID:       zqc4pey034g0
:END:
function  module( name : TModName  ) : TModId;
type TModId : cardinal;
TModName : string[32];

** TODO actor model for retro
:PROPERTIES:
:TS:       <2013-05-15 12:13PM>
:ID:       d5s2oc2134g0
:END:
** TODO module system
:PROPERTIES:
:TS:       <2013-05-15 12:13PM>
:ID:       8vdhed2134g0
:END:
** TODO message passing system
:PROPERTIES:
:TS:       <2013-05-15 12:14PM>
:ID:       pqdase2134g0
:END:
TMessage : record end;
TQueue   : record end;
* TODO scrolling repl
:PROPERTIES:
:TS:       <2014-04-01 12:52AM>
:ID:       qx2b9mg0ufg0
:END:
- [ ] array of (colored?) lines for the backlog
- [ ] merge in scrolling support from ngaro
(maybe I can use the existing buffer/scrolling features from mned?)

* TODO allow chaining keymaps together
:PROPERTIES:
:TS:       <2014-04-01 01:22AM>
:ID:       gwz8izh0ufg0
:END:
This is fairly easy. Simply assign a default that passes the buck to the next item in the chain.

* TODO consider porting https://github.com/gabriel-comeau/tbuikit
:PROPERTIES:
:TS:       <2014-04-01 01:25AM>
:ID:       0zs0m4i0ufg0
:END:
