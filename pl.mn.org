#+title: minneron : planning view (implementation plans for new features)
#+tags: pl min
#+date: <2013-01-11 11:43AM>

* TODO [1/8] word wrap implementation                                 :ed004:
:PROPERTIES:
:TS: <2013-01-11 11:45AM>
:ID: hnyjxqf0kzf0
:END:
** DONE remove old «ed/show/line» { line based version }
:PROPERTIES:
:TS: <2013-01-13 04:34AM>
:ID: 8lf6f0s0mzf0
:END:
#+name: ed/show/node/0
#+begin_src pascal
  procedure show_line( line : string );
  begin
    cwrite( stri.trunc( line, cw.scr.w - cw.cur.x ));
    cwrite( '|%' ); // clreol
  end;
  
  procedure show_node;
  {test against li.strnode to distinguish from anchors, which will no longer use }
  if cur.value.inheritsfrom( li.strnode ) then
  begin
    show_nums;
    line := li.strnode( cur.value ).str;
    if cur.index = position.index then show_edit( line )
    else show_line( line );
    inc( ypos )
  end;
#+end_src

** TODO { lines as lists implementation }
:PROPERTIES:
:TS: <2013-01-13 05:15AM>
:ID: fjlidwt0mzf0
:END:
new =show_node= version: id:51l0hns0mzf0



** TODO implement new ed/show/block with wrapping and dynamic height
:PROPERTIES:
:TS: <2013-01-13 04:52AM>
:ID: w1i9ats0mzf0
:END:
#+name: ed/show/line
#+begin_src pascal
  token := li.strnode( line_cursor.value ).lis;

  for token in cur.value.lines do
    display
  end;
#+end_src

** TODO show placeholder for line numbers on wrap
:PROPERTIES:
:TS: <2013-01-13 05:05AM>
:ID: 2va21gt0mzf0
:END:
#+name: ed/show/wrap
#+begin_src

#+end_src



** TODO implement
:PROPERTIES:
:TS: <2013-01-13 04:57AM>
:ID: 8y3jb1t0mzf0
:END:

** TODO break input lines down into tokens
:PROPERTIES:
:TS: <2013-01-11 03:17AM>
:ID: cpvbjt61jzf0
:END:
** TODO add an offset to the cursor type
:PROPERTIES:
:TS: <2013-01-10 09:37AM>
:ID: uzh4ta81izf0
:END:

** TODO generate display blocks from the line spans
:PROPERTIES:
:TS: <2013-01-10 09:38AM>
:ID: xzn4eb81izf0
:END:
elements are sequences/strings with a 1-dimensional length
blocks are rectangles with a 2-dimensional bounding box

* TODO [0/2] block-based display plan                                 :ed007:
:PROPERTIES:
:TS: <2013-01-01 10:35PM>
:ID: tm74ek017zf0
:END:
** TODO displaying documents                                            :ui:
:PROPERTIES:
:TS: <2013-01-03 04:13PM>
:ID: qbighi00azf0
:END:
*** straightforward linear flow display
:PROPERTIES:
:TS: <2013-01-04 04:30AM>
:ID: yb55yly0azf0
:END:

*** the scene graph                                                 :later:
:PROPERTIES:
:TS: <2013-01-03 04:16PM>
:ID: iza8lm00azf0
:END:

The block objects serve a secondary purpose, in that they can recursively display themselves (just like widgets in gamesketchlib or whatever).

However, document structure and display structure needn't coincide: nodes might be hidden, or show up at arbitrary coordinates, etc.

So it's likely that each node would have a corresponding display object, which understood coordinates, geometry, etc.

In particular, two clones of the same node would have different geometries and coordinates.

Note also that display nodes may not be textual: raster images, vector shapes,
and dialog widgets are all perfectly valid options.
** TODO SECTION crawler concept (cursor+stack machine)                 :cur:
:PROPERTIES:
:TS: <2013-01-10 07:43AM>
:ID: vfbhc031izf0
:END:
*** TODO add clasp as an actual node type, with left,right, and up pointers. :ll:
:PROPERTIES:
:TS: <2013-01-10 08:17AM>
:ID: 9s66sl41izf0
:END:
*** TODO add hook as a node type with left, right, and down pointers.  :ll:
:PROPERTIES:
:TS: <2013-01-10 08:19AM>
:ID: rq33yn41izf0
:END:
** TODO make a stack for offsets, so the document can be a tree
:PROPERTIES:
:TS: <2013-01-10 09:43AM>
:ID: r2bl0k81izf0
:END:
** TODO introduce the block type (nested span)
:PROPERTIES:
:TS: <2013-01-12 02:50PM>
:ID: 3xyfre41lzf0
:END:
** TODO break the input text into tokens grouped by element nodes
:PROPERTIES:
:TS: <2013-01-10 09:37AM>
:ID: uwf83b81izf0
:END:
** TODO generalize wrap algorithm from ed004 to arbitrary blocks
:PROPERTIES:
:TS: <2013-01-13 04:53AM>
:ID: ozhfqus0mzf0
:END:
* TODO [0/2] command interpreter plan                                   :cmd:
:PROPERTIES:
:TS: <2013-01-01 10:35PM>
:ID: 6v09mj017zf0
:END:
** TODO number-based dispatch
:PROPERTIES:
:TS: <2013-01-10 07:47AM>
:ID: va99k631izf0
:END:
** TODO string-based dispatch
:PROPERTIES:
:TS: <2013-01-10 07:46AM>
:ID: if8k2631izf0
:END:
* TODO [0/0] table editor implementation                              :ed011:
:PROPERTIES:
:TS:       <2012-11-10 02:30PM>
:ID:       uhv4ml01axf0
:END:
** load arrays of nodes
:PROPERTIES:
:TS: <2013-01-11 12:01PM>
:ID: nhqb8ig0kzf0
:END:
** TODO [0/0] merge in file:~/r/work/griddemo.pas
:PROPERTIES:
:TS:       <2012-11-13 10:48AM>
:ID:       re6c12o0exf0
:END:
* TODO [0/0] database implementation
:PROPERTIES:
:TS: <2013-01-11 12:01PM>
:ID: xob8dhg0kzf0
:END:


