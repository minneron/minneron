#+title: minneron : planning view (implementation plans for new features)
#+tags: pl min
#+date: <2013-01-11 11:43AM>

* TODO [2/4] block-based display plan (single column)           :ed007:
:PROPERTIES:
:TS: <2013-01-01 10:35PM>
:ID: tm74ek017zf0
:END:
** displaying documents                                         :ui:
:PROPERTIES:
:TS: <2013-01-03 04:13PM>
:ID: qbighi00azf0
:END:
*** the scene graph                                           :later:
:PROPERTIES:
:TS: <2013-01-03 04:16PM>
:ID: iza8lm00azf0
:END:

The block objects serve a secondary purpose, in that they can recursively display themselves (just like widgets in gamesketchlib or whatever).

However, document structure and display structure needn't coincide: nodes might be hidden, or show up at arbitrary coordinates, etc.

So it's likely that each node would have a corresponding display object, which understood coordinates, geometry, etc.

In particular, two clones of the same node would have different geometries and coordinates.

Note also that display nodes may not be textual: raster images, vector shapes, and dialog widgets are all perfectly valid options.
** DONE create =ITextTile= to give the text cursor a nice flat list.
:PROPERTIES:
:TS:       <2013-09-26 05:12PM>
:ID:       hl6740z009g0
:END:
The idea here is that =ITextTile= provides an arbitrary interface for creating widgets that /look/ like editable lines of text, so the text cursor can move up and down in what appears to be a flat list of lines.

** DONE [7/7] Refactor the current editor/cursor behavior to use =ITextTile=
:PROPERTIES:
:TS:       <2013-09-26 05:20PM>
:ID:       fuzehdz009g0
:END:
*** DONE =show_node= should take node as parameter and not touch =cur=
:PROPERTIES:
:TS:       <2013-09-27 03:52PM>
:ID:       wf9dafb119g0
:END:

*** DONE =show_node= should dispatch to other functions, based on type
:PROPERTIES:
:TS:       <2013-09-27 03:53PM>
:ID:       ak2ddhb119g0
:END:

*** DONE wrap the buffer as a =TBuffer= but expose currently used methods.
:PROPERTIES:
:TS:       <2013-09-28 12:29PM>
:ID:       ptog1k3039g0
:END:
Well, I accomplished this by making it a subclass of =li.node=.
The problem is that several parts of the editor use the object's =cursor= directly.

*** DONE [2/2] Refactor =editor= and =TBuffer= so the cursor isn't used directly.
:PROPERTIES:
:TS:       <2013-09-28 01:06PM>
:ID:       il78a95039g0
:END:
**** DONE Replace the =top= and =position= cursors with simple integers.
:PROPERTIES:
:TS:       <2013-09-28 01:07PM>
:ID:       bkhh3b5039g0
:END:

**** DONE Add =InsLine= and =DelLine= methods to =TBuffer= (and =ITextTile=?)
:PROPERTIES:
:TS:       <2013-09-28 01:08PM>
:ID:       68x2qc5039g0
:END:

*** DONE have =TBuffer= implement =ITextTile=
:PROPERTIES:
:TS:       <2013-09-28 12:40PM>
:ID:       z0g3a24039g0
:END:

*** DONE have buffer.nodelist use the =rings= unit instead of =li=
:PROPERTIES:
:TS:       <2013-09-28 07:35PM>
:ID:       iek529n039g0
:END:

*** DONE implement something like =make_cursor= to walk =ITextTile= objects
:PROPERTIES:
:TS:       <2013-09-28 12:13PM>
:ID:       t3b3ws2039g0
:END:
**** NOTE that something is a simple for loop. :)
:PROPERTIES:
:TS:       <2013-09-28 10:09PM>
:ID:       wuihoeu039g0
:END:
** TODO [2/5] break the display down into =impworld= morphs
:PROPERTIES:
:TS:       <2013-09-30 12:16AM>
:ID:       9ad5js1059g0
:END:
*** DONE [2/2] implement =step= (task system / mnml / impworld )
:PROPERTIES:
:TS: <2013-01-17 08:20AM>
:ID: zwuf3p10szf0
:END:
**** DONE break =TEditor.run= into =.loop= and =.step=
:PROPERTIES:
:TS:       <2013-10-01 12:02AM>
:ID:       u80as8h069g0
:END:
**** DONE merge =mnml= into the main minneron code
:PROPERTIES:
:TS:       <2013-10-01 03:34AM>
:ID:       ojmk32r069g0
:END:
*** DONE [5/5] merge =impworld= and =vorunati= to add multiple objects to the scene
:PROPERTIES:
:TS:       <2013-10-01 02:40AM>
:ID:       nj157lo069g0
:END:
**** DONE get the two mainloops running simultaneously
:PROPERTIES:
:TS:       <2013-10-01 06:57PM>
:ID:       s0p1d8j079g0
:END:
**** DONE standardize the interface
:PROPERTIES:
:TS:       <2013-10-01 06:57PM>
:ID:       p11dw8j079g0
:END:
#+begin_src pascal
  if init then
    begin
      repeat step; render until done;
      exit;
    end;
#+end_src*
**** DONE migrate impworld from objects to classes
:PROPERTIES:
:TS:       <2013-10-01 09:03PM>
:ID:       3b5043p079g0
:END:
**** DONE have =impworld.actor= implement =IVorTask=
:PROPERTIES:
:TS:       <2013-10-01 07:00PM>
:ID:       jq769ej079g0
:END:
**** DONE move =impworld.step= into =mnml= itself
:PROPERTIES:
:TS:       <2013-10-01 07:02PM>
:ID:       5nu40hj079g0
:END:
*** TODO let the combined loop handle =TEditor='s lifecycle.
:PROPERTIES:
:TS:       <2013-10-01 01:46PM>
:ID:       orvbiu4079g0
:END:

*** TODO use sub-windows to separate the display
:PROPERTIES:
:TS:       <2013-10-01 06:58PM>
:ID:       ssgezaj079g0
:END:

*** TODO implement simple tiling
:PROPERTIES:
:TS:       <2013-10-01 02:41AM>
:ID:       3qk0olo069g0
:END:


** TODO create a simple interactive grammar builder
:PROPERTIES:
:TS:       <2013-09-30 12:22AM>
:ID:       v10jy22059g0
:END:
*** TODO port the =pasout= logic so I have a simple tree editor
:PROPERTIES:
:TS:       <2013-09-30 12:19AM>
:ID:       wvuesy1059g0
:END:

*** TODO introduce the token type (tagged string span)
:PROPERTIES:
:TS:       <2013-09-30 12:34AM>
:ID:       83p89n2059g0
:END:

*** TODO using =pre= or =imprex=, build a tokenizer interactively
:PROPERTIES:
:TS:       <2013-09-30 12:35AM>
:ID:       8cfgnp2059g0
:END:

*** TODO using the tokenizer, apply syntax-highlighting to the buffer
:PROPERTIES:
:TS:       <2013-09-30 12:36AM>
:ID:       icbieq2059g0
:END:

*** TODO introduce the element type (nested span)
:PROPERTIES:
:TS: <2013-01-12 02:50PM>
:ID: 3xyfre41lzf0
:END:
*** TODO modify =pre= or =imprex= so that matching builds an element tree
:PROPERTIES:
:TS:       <2013-09-30 12:24AM>
:ID:       noyae62059g0
:END:
*** TODO render the parse tree in a second, read only tree window
:PROPERTIES:
:TS:       <2013-09-30 12:25AM>
:ID:       kb1jz72059g0
:END:

*** TODO use the grammar tree buffer + a cursor to drive a parser
:PROPERTIES:
:TS:       <2013-09-30 12:26AM>
:ID:       h1k7h92059g0
:END:

*** TODO using =pre= / =imprex=, lex and parse the source buffer
:PROPERTIES:
:TS: <2013-01-10 09:37AM>
:ID: uwf83b81izf0
:END:
*** TODO automatically update the parse tree when grammar changes
:PROPERTIES:
:TS:       <2013-09-30 12:23AM>
:ID:       46w8l42059g0
:END:

*** TODO display blocks corresponding to the parsed inner nodes
:PROPERTIES:
:TS: <2013-01-10 09:38AM>
:ID: xzn4eb81izf0
:END:
elements are sequences/strings with a 1-dimensional length
blocks are rectangles with a 2-dimensional bounding box

* TODO [5/9] word wrap implementation                           :ed004:
:PROPERTIES:
:TS: <2013-01-11 11:45AM>
:ID: hnyjxqf0kzf0
:END:
** DONE remove old «ed/show/line» { line based version }
:PROPERTIES:
:TS: <2013-01-13 04:34AM>
:ID: 8lf6f0s0mzf0
:END:
#+name: ed/show/node/0
#+begin_src pascal
  procedure show_line( line : string );
  begin
    cwrite( stri.trunc( line, cw.scr.w - cw.cur.x ));
    cwrite( '|%' ); // clreol
  end;
  
  procedure show_node;
  {test against li.strnode to distinguish from anchors, which will no longer use }
  if cur.value.inheritsfrom( li.strnode ) then
  begin
    show_nums;
    line := li.strnode( cur.value ).str;
    if cur.index = position.index then show_edit( line )
    else show_line( line );
    inc( ypos )
  end;
#+end_src

** DONE { lines as lists implementation }
:PROPERTIES:
:TS: <2013-01-13 05:15AM>
:ID: fjlidwt0mzf0
:END:
new =show_node= version: id:51l0hns0mzf0

** DONE implement new ed/show/block with wrapping and dynamic height
:PROPERTIES:
:TS: <2013-01-13 04:52AM>
:ID: w1i9ats0mzf0
:END:
** DONE break input lines down into tokens
:PROPERTIES:
:TS: <2013-01-11 03:17AM>
:ID: cpvbjt61jzf0
:END:

** DONE show placeholder for line numbers on wrap
:PROPERTIES:
:TS: <2013-01-13 05:05AM>
:ID: 2va21gt0mzf0
:END:
** TODO resize and relocate the editor based on the cursor position
:PROPERTIES:
:TS: <2013-01-13 07:16PM>
:ID: 424359i0nzf0
:END:
*** TODO track the x and y coordinates of the cursor
:PROPERTIES:
:TS: <2013-01-17 07:35AM>
:ID: 4oec67e1rzf0
:END:
*** TODO divide each line's list of tokens into separate nodes for each virtual line
:PROPERTIES:
:TS: <2013-01-17 07:35AM>
:ID: kf6aq7e1rzf0
:END:
** TODO add an offset to the cursor type
:PROPERTIES:
:TS: <2013-01-10 09:37AM>
:ID: uzh4ta81izf0
:END:
** TODO move line wrapping logic from =ed.show_list= to =TBuffer=
:PROPERTIES:
:TS:       <2013-09-28 12:15PM>
:ID:       wdwh7w2039g0
:END:
** TODO move tokenization logic from =editor.parse= to =TBuffer=
:PROPERTIES:
:TS:       <2013-09-28 12:18PM>
:ID:       vbo8713039g0
:END:
* TODO generalized 2d layout
:PROPERTIES:
:TS:       <2013-09-28 10:22PM>
:ID:       89s9fzu039g0
:END:
** TODO generalize wrap algorithm from ed004 to arbitrary blocks
:PROPERTIES:
:TS: <2013-01-13 04:53AM>
:ID: ozhfqus0mzf0
:END:
* TODO [0/2] command interpreter plan                           :cmd:
:PROPERTIES:
:TS: <2013-01-01 10:35PM>
:ID: 6v09mj017zf0
:END:
** TODO number-based dispatch
:PROPERTIES:
:TS: <2013-01-10 07:47AM>
:ID: va99k631izf0
:END:
** TODO string-based dispatch
:PROPERTIES:
:TS: <2013-01-10 07:46AM>
:ID: if8k2631izf0
:END:
* TODO [0/1] table editor implementation                        :ed011:
:PROPERTIES:
:TS:       <2012-11-10 02:30PM>
:ID:       uhv4ml01axf0
:END:
** load arrays of nodes
:PROPERTIES:
:TS: <2013-01-11 12:01PM>
:ID: nhqb8ig0kzf0
:END:
** TODO [0/0] merge in file:~/r/work/griddemo.pas
:PROPERTIES:
:TS:       <2012-11-13 10:48AM>
:ID:       re6c12o0exf0
:END:
* TODO [0/0] database implementation
:PROPERTIES:
:TS: <2013-01-11 12:01PM>
:ID: xob8dhg0kzf0
:END:


* TODO planned enhancements for =mnml=
:PROPERTIES:
:TS:       <2013-05-15 12:14PM>
:ID:       m2k24e2134g0
:END:
** TODO create a module for scheduled tasks
:PROPERTIES:
:TS:       <2013-05-15 10:47AM>
:ID:       ydr91ey034g0
:END:
#+begin_src recur
  function  ( pcmd : callable; interval, times, priority : integer ) : TTaskId;
  function  change( task : callable; interval, times, priority : integer ) : TTaskId;
#+end_src

** TODO create a unit to handle module definititions
:PROPERTIES:
:TS:       <2013-05-15 10:48AM>
:ID:       zqc4pey034g0
:END:
function  module( name : TModName  ) : TModId;
type TModId : cardinal;
TModName : string[32];

** TODO actor model for retro
:PROPERTIES:
:TS:       <2013-05-15 12:13PM>
:ID:       d5s2oc2134g0
:END:
** TODO module system
:PROPERTIES:
:TS:       <2013-05-15 12:13PM>
:ID:       8vdhed2134g0
:END:
** TODO message passing system
:PROPERTIES:
:TS:       <2013-05-15 12:14PM>
:ID:       pqdase2134g0
:END:
TMessage : record end;
TQueue   : record end;

