#+title: minneron : planning view (implementation plans for new features)
#+tags: pl min
#+date: <2013-01-11 11:43AM>

* TODO [1/11] block-based display plan                          :ed007:
:PROPERTIES:
:TS: <2013-01-01 10:35PM>
:ID: tm74ek017zf0
:END:

** DONE create =ITextTile= to give the text cursor a nice flat list.
:PROPERTIES:
:TS:       <2013-09-26 05:12PM>
:ID:       hl6740z009g0
:END:
The idea here is that =ITextTile= provides an arbitrary interface for creating widgets that /look/ like editable lines of text, so the text cursor can move up and down in what appears to be a flat list of lines.

** TODO [6/10] Refactor the current editor/cursor behavior to use =ITextTile=
:PROPERTIES:
:TS:       <2013-09-26 05:20PM>
:ID:       fuzehdz009g0
:END:
*** DONE =show_node= should take node as parameter and not touch =cur=
:PROPERTIES:
:TS:       <2013-09-27 03:52PM>
:ID:       wf9dafb119g0
:END:

*** DONE =show_node= should dispatch to other functions, based on type
:PROPERTIES:
:TS:       <2013-09-27 03:53PM>
:ID:       ak2ddhb119g0
:END:
*** DONE wrap the buffer as a =TBuffer= but expose currently used methods.
:PROPERTIES:
:TS:       <2013-09-28 12:29PM>
:ID:       ptog1k3039g0
:END:
Well, I accomplished this by making it a subclass of =li.node=.
The problem is that several parts of the editor use the object's =cursor= directly.

*** DONE [2/2] Refactor =editor= and =TBuffer= so the cursor isn't used directly.
:PROPERTIES:
:TS:       <2013-09-28 01:06PM>
:ID:       il78a95039g0
:END:
**** DONE Replace the =top= and =position= cursors with simple integers.
:PROPERTIES:
:TS:       <2013-09-28 01:07PM>
:ID:       bkhh3b5039g0
:END:
**** DONE Add =InsLine= and =DelLine= methods to =TBuffer= (and =ITextTile=?)
:PROPERTIES:
:TS:       <2013-09-28 01:08PM>
:ID:       68x2qc5039g0
:END:
*** DONE have =TBuffer= implement =ITextTile=
:PROPERTIES:
:TS:       <2013-09-28 12:40PM>
:ID:       z0g3a24039g0
:END:
*** DONE have buffer.nodelist use the =rings= unit instead of =li=
:PROPERTIES:
:TS:       <2013-09-28 07:35PM>
:ID:       iek529n039g0
:END:

*** TODO move line wrapping logic from =ed.show_list= to =TBuffer=
:PROPERTIES:
:TS:       <2013-09-28 12:15PM>
:ID:       wdwh7w2039g0
:END:
*** TODO move =editor.parse= to =TBuffer=
:PROPERTIES:
:TS:       <2013-09-28 12:18PM>
:ID:       vbo8713039g0
:END:
*** TODO move =editor.load= to =TBuffer=
:PROPERTIES:
:TS:       <2013-09-28 12:23PM>
:ID:       9df95a3039g0
:END:

*** TODO implement something like =make_cursor= to walk =ITextTile= objects
:PROPERTIES:
:TS:       <2013-09-28 12:13PM>
:ID:       t3b3ws2039g0
:END:

** TODO fix delete behavior at end of line (bug in =at_end= for input ctrl?)
:PROPERTIES:
:TS:       <2013-09-28 02:47PM>
:ID:       eye89x9039g0
:END:

** TODO implement step
:PROPERTIES:
:TS: <2013-01-17 08:20AM>
:ID: zwuf3p10szf0
:END:

** TODO displaying documents                                            :ui:
:PROPERTIES:
:TS: <2013-01-03 04:13PM>
:ID: qbighi00azf0
:END:
*** straightforward linear flow display
:PROPERTIES:
:TS: <2013-01-04 04:30AM>
:ID: yb55yly0azf0
:END:

*** the scene graph                                                 :later:
:PROPERTIES:
:TS: <2013-01-03 04:16PM>
:ID: iza8lm00azf0
:END:

The block objects serve a secondary purpose, in that they can recursively display themselves (just like widgets in gamesketchlib or whatever).

However, document structure and display structure needn't coincide: nodes might be hidden, or show up at arbitrary coordinates, etc.

So it's likely that each node would have a corresponding display object, which understood coordinates, geometry, etc.

In particular, two clones of the same node would have different geometries and coordinates.

Note also that display nodes may not be textual: raster images, vector shapes, and dialog widgets are all perfectly valid options.
** TODO SECTION crawler concept (cursor+stack machine)                 :cur:
:PROPERTIES:
:TS: <2013-01-10 07:43AM>
:ID: vfbhc031izf0
:END:
*** TODO add clasp as an actual node type, with left,right, and up pointers. :ll:
:PROPERTIES:
:TS: <2013-01-10 08:17AM>
:ID: 9s66sl41izf0
:END:
*** TODO add hook as a node type with left, right, and down pointers. :ll:
:PROPERTIES:
:TS: <2013-01-10 08:19AM>
:ID: rq33yn41izf0
:END:
** TODO make a stack for offsets, so the document can be a tree
:PROPERTIES:
:TS: <2013-01-10 09:43AM>
:ID: r2bl0k81izf0
:END:
** TODO introduce the block type (nested span)
:PROPERTIES:
:TS: <2013-01-12 02:50PM>
:ID: 3xyfre41lzf0
:END:
** TODO break the input text into tokens grouped by element nodes
:PROPERTIES:
:TS: <2013-01-10 09:37AM>
:ID: uwf83b81izf0
:END:
** TODO generalize wrap algorithm from ed004 to arbitrary blocks
:PROPERTIES:
:TS: <2013-01-13 04:53AM>
:ID: ozhfqus0mzf0
:END:
** TODO generate display blocks from the line spans
:PROPERTIES:
:TS: <2013-01-10 09:38AM>
:ID: xzn4eb81izf0
:END:
elements are sequences/strings with a 1-dimensional length
blocks are rectangles with a 2-dimensional bounding box

* TODO [5/6] word wrap implementation                                 :ed004:
:PROPERTIES:
:TS: <2013-01-11 11:45AM>
:ID: hnyjxqf0kzf0
:END:
** DONE remove old «ed/show/line» { line based version }
:PROPERTIES:
:TS: <2013-01-13 04:34AM>
:ID: 8lf6f0s0mzf0
:END:
#+name: ed/show/node/0
#+begin_src pascal
  procedure show_line( line : string );
  begin
    cwrite( stri.trunc( line, cw.scr.w - cw.cur.x ));
    cwrite( '|%' ); // clreol
  end;
  
  procedure show_node;
  {test against li.strnode to distinguish from anchors, which will no longer use }
  if cur.value.inheritsfrom( li.strnode ) then
  begin
    show_nums;
    line := li.strnode( cur.value ).str;
    if cur.index = position.index then show_edit( line )
    else show_line( line );
    inc( ypos )
  end;
#+end_src

** DONE { lines as lists implementation }
:PROPERTIES:
:TS: <2013-01-13 05:15AM>
:ID: fjlidwt0mzf0
:END:
new =show_node= version: id:51l0hns0mzf0

** DONE implement new ed/show/block with wrapping and dynamic height
:PROPERTIES:
:TS: <2013-01-13 04:52AM>
:ID: w1i9ats0mzf0
:END:
** DONE break input lines down into tokens
:PROPERTIES:
:TS: <2013-01-11 03:17AM>
:ID: cpvbjt61jzf0
:END:

** DONE show placeholder for line numbers on wrap
:PROPERTIES:
:TS: <2013-01-13 05:05AM>
:ID: 2va21gt0mzf0
:END:
** TODO resize and relocate the editor based on the cursor position
:PROPERTIES:
:TS: <2013-01-13 07:16PM>
:ID: 424359i0nzf0
:END:
*** TODO track the x and y coordinates of the cursor
:PROPERTIES:
:TS: <2013-01-17 07:35AM>
:ID: 4oec67e1rzf0
:END:
*** TODO divide each line's list of tokens into separate nodes for each virtual line
:PROPERTIES:
:TS: <2013-01-17 07:35AM>
:ID: kf6aq7e1rzf0
:END:
** TODO add an offset to the cursor type
:PROPERTIES:
:TS: <2013-01-10 09:37AM>
:ID: uzh4ta81izf0
:END:
* TODO [0/2] command interpreter plan                                   :cmd:
:PROPERTIES:
:TS: <2013-01-01 10:35PM>
:ID: 6v09mj017zf0
:END:
** TODO number-based dispatch
:PROPERTIES:
:TS: <2013-01-10 07:47AM>
:ID: va99k631izf0
:END:
** TODO string-based dispatch
:PROPERTIES:
:TS: <2013-01-10 07:46AM>
:ID: if8k2631izf0
:END:
* TODO [0/0] table editor implementation                              :ed011:
:PROPERTIES:
:TS:       <2012-11-10 02:30PM>
:ID:       uhv4ml01axf0
:END:
** load arrays of nodes
:PROPERTIES:
:TS: <2013-01-11 12:01PM>
:ID: nhqb8ig0kzf0
:END:
** TODO [0/0] merge in file:~/r/work/griddemo.pas
:PROPERTIES:
:TS:       <2012-11-13 10:48AM>
:ID:       re6c12o0exf0
:END:
* TODO [0/0] database implementation
:PROPERTIES:
:TS: <2013-01-11 12:01PM>
:ID: xob8dhg0kzf0
:END:


